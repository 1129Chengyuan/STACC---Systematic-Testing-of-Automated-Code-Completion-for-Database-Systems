Model,Temperature,Top_p,Frequency_penalty,Presence_penalty,Passed,Error Report,Execution Time for testcases (seconds),Memory Usage (KiB)
gpt-4,1,0.7,0,0,"    def find_by_template(self, template, field_list=None):
        # Construct the SQL query
        sql = ""SELECT * FROM "" + self.table_name
        if template:
            sql += "" WHERE "" + "" AND "".join([f""{k}='{v}'"" for k, v in template.items()])
        if field_list:
            sql = sql.replace(""*"", "", "".join(field_list))

        # Execute the query and fetch the results
        cursor = self._cnx.cursor()
        cursor.execute(sql)
        rows = cursor.fetchall()

        # Convert the results to a list of dictionaries
        result = []
        for row in rows:
            record = {}
            for i, col_name in enumerate(cursor.description):
                if not field_list or col_name[0] in field_list:
                    record[col_name[0]] = row[i]
            result.append(record)

        return result",0,"{'total': 13, 'passed': 0, 'failed': 0, 'skipped': 0, 'errors': 13, 'failure_details': []}",0.06967579998308793,17.068359375,1
gpt-4,1.25,0.7,0,0,"    def find_by_template(self, template, field_list=None):
        """"""
        Find records that match the given template.

        :param template: A dictionary of the form { ""field1"" : value1, ""field2"": value2, ...}
        :param field_list: A list of request fields of the form, ['fielda', 'fieldb', ...]
        :return: A list containing dictionaries. A dictionary is in the list representing each record
        that matches the template. The dictionary only contains the requested fields.
        """"""
        result = []
        with open(self.table_name + "".csv"", ""r"") as csv_file:
            reader = csv.DictReader(csv_file)
            for row in reader:
                match = True
                for key, value in template.items():
                    if row[key] != value:
                        match = False
                        break
                if match:
                    if field_list is None:
                        result.append(row)
                    else:
                        new_row = {}
                        for field in field_list:
                            new_row[field] = row[field]
                        result.append(new_row)
        return result",0,"{'total': 13, 'passed': 0, 'failed': 0, 'skipped': 0, 'errors': 13, 'failure_details': []}",0.03497919996152632,17.71875,1.25
gpt-4,1.5,0.7,0,0,"    def find_by_template(self, template, field_list=None):
        """"""
        Finds records in the table that match the given template.

        :param template: A dictionary of the form { ""field1"" : value1, ""field2"": value2, ...}
        :param field_list: A list of request fields of the form, ['fielda', 'fieldb', ...]
        :return: A list containing dictionaries. A dictionary is in the list representing each record
        that matches the template. The dictionary only contains the requested fields.
        """"""
        # TODO: Implement this method
        pass",0,"{'total': 13, 'passed': 0, 'failed': 10, 'skipped': 0, 'errors': 3, 'failure_details': [{'test': <TestCases.CombinedTests testMethod=test_extra_template_fields>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 51, in test_extra_template_fields\n    self.assertEqual(results, expected)\nAssertionError: None != []\n'}, {'test': <TestCases.CombinedTests testMethod=test_find_by_template_missing_field>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 362, in test_find_by_template_missing_field\n    self.assertEqual(actual, expected)\nAssertionError: None != []\n'}, {'test': <TestCases.CombinedTests testMethod=test_find_by_template_multiple_matches>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 268, in test_find_by_template_multiple_matches\n    self.assertEqual(results, expected)\nAssertionError: None != [{\'city\': \'Canton\', \'country\': \'US\', \'par[4386 chars]OH\'}]\n'}, {'test': <TestCases.CombinedTests testMethod=test_find_by_template_no_matches>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 65, in test_find_by_template_no_matches\n    self.assertEqual(results, expected)\nAssertionError: None != []\n'}, {'test': <TestCases.CombinedTests testMethod=test_find_by_template_one_match>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 313, in test_find_by_template_one_match\n    self.assertEqual(actual, expected)\nAssertionError: None != [{\'franchID\': \'BOS\', \'franchName\': \'Bosto[37 chars] \'\'}]\n'}, {'test': <TestCases.CombinedTests testMethod=test_find_by_template_with_field_list>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 307, in test_find_by_template_with_field_list\n    self.assertEqual(results, expected)\nAssertionError: None != [{\'park.key\': \'CAN01\', \'park.name\': \'Maha[1801 chars]rk\'}]\n'}, {'test': <TestCases.CombinedTests testMethod=test_franch_find_by_template_multiple_matches>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 349, in test_franch_find_by_template_multiple_matches\n    self.assertEqual(actual, expected)\nAssertionError: None != [{\'franchID\': \'ANA\', \'franchName\': \'Los A[1627 chars]ls\'}]\n'}, {'test': <TestCases.CombinedTests testMethod=test_franch_template_no_matches>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 355, in test_franch_template_no_matches\n    self.assertEqual(actual, expected)\nAssertionError: None != []\n'}, {'test': <TestCases.CombinedTests testMethod=test_invalid_template_field>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 22, in test_invalid_template_field\n    with self.assertRaises(KeyError):\nAssertionError: KeyError not raised\n'}, {'test': <TestCases.CombinedTests testMethod=test_park_test_find_by_template_one_match>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 59, in test_park_test_find_by_template_one_match\n    self.assertEqual(results, expected)\nAssertionError: None != [{\'park.key\': \'ATL03\', \'park.name\': \'Sunt[76 chars]US\'}]\n'}]}",0.022859299962874502,16.8828125,1.5
gpt-4,1.75,0.7,0,0,"    def find_by_template(self, template, field_list=None):
        """"""
        Finds records in the CSV file that match the given template.

        :param template: A dictionary of the form { ""field1"" : value1, ""field2"": value2, ...}
        :param field_list: A list of request fields of the form, ['fielda', 'fieldb', ...]
        :return: A list containing dictionaries. A dictionary is in the list representing each record
        that matches the template. The dictionary only contains the requested fields.
        """"""
        result = []
        with open(self.table_name + "".csv"", ""r"") as f:
            reader = csv.DictReader(f)
            for row in reader:
                match = True
                for key, value in template.items():
                    if row[key] != value:
                        match = False
                        break
                if match:
                    if field_list is None:
                        result.append(row)
                    else:
                        new_row = {}
                        for field in field_list:
                            new_row[field] = row[field]
                        result.append(new_row)
        return result",0,"{'total': 13, 'passed': 0, 'failed': 0, 'skipped': 0, 'errors': 13, 'failure_details': []}",0.03480990004027262,17.705078125,1.75
gpt-4,2.0,0.7,0,0,"    def find_by_template(self, template, field_list=None):
        """"""
        Find records in the table that match the template.

        :param template: A dictionary of the form { ""field1"" : value1, ""field2"": value2, ...}
        :param field_list: A list of request fields of the form, ['fielda', 'fieldb', ...]
        :return: A list containing dictionaries. A dictionary is in the list representing each record
                 that matches the template. The dictionary only contains the requested fields.
        """"""
        result = []
        with open(self.table_name, 'r') as f:
            reader = csv.DictReader(f)
            for row in reader:
                if all(row.get(key) == str(value) for key, value in template.items()):
                    if field_list is None:
                        result.append(row)
                    else:
                        result.append({field: row[field] for field in field_list})
        return result",12,"{'total': 13, 'passed': 12, 'failed': 1, 'skipped': 0, 'errors': 0, 'failure_details': [{'test': <TestCases.CombinedTests testMethod=test_invalid_template_field>, 'exception': 'Traceback (most recent call last):\n  File ""C:\\Users\\1129c\\Downloads\\STACC-V3\\src\\TestCases.py"", line 22, in test_invalid_template_field\n    with self.assertRaises(KeyError):\nAssertionError: KeyError not raised\n'}]}",0.49803720001364127,36.6298828125,2.0
